<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule name="Epic Linked Template Config" type="BeforeProvisioning">
  <Description>Before Provisioning Rule which changes disables and enables to a modify.</Description>
  <Source><![CDATA[
      import java.text.SimpleDateFormat;
      import java.util.Date;
      import java.util.List;
      import java.util.Map;
      import sailpoint.object.Application;
      import sailpoint.object.ProvisioningPlan;
      import sailpoint.object.ManagedAttribute.Type;
      import sailpoint.object.ProvisioningPlan.AccountRequest;
      import sailpoint.object.ProvisioningPlan.AttributeRequest;
      import sailpoint.object.ProvisioningPlan.Operation;
      import sailpoint.rule.Account;
      import sailpoint.rule.ManagedAttributeDetails;
      import sailpoint.server.IdnRuleUtil;
      import sailpoint.tools.GeneralException;
      import sailpoint.object.Identity;

      Identity identity = plan.getIdentity();
      String defaultLinkedTemplateIDName = "Epic DefaultLinkedTemplateID [source]";
      String defaultLoginType = "TestLOGIN";
    
      /**
       * 
       * @param id
       * @return
       */
      private String getLinkedTemplateName(String id) {
        log.error("EPIC LTC BPR - getLinkedTemplateName - LinkedTemplateID: " + id);
        log.error("EPIC LTC BPR - getLinkedTemplateName - Current Application ID: " + application.getId());
        // Get details of LinkedTemplate object by LinkedTemplateID
        ManagedAttributeDetails linkedTemplateDetails = idn.getManagedAttributeDetails(application.getId(),
            "LinkedTemplateID", id, Type.Entitlement);
        // Get the attributes and name fom the LinkedTemplates entitlement object
        Map linkedTemplateAttributes = linkedTemplateDetails != null ? linkedTemplateDetails.getAttributes() : null;
        log.error(
            "EPIC LTC BPR - getLinkedTemplateName - linkedTemplateAttributes: " + linkedTemplateAttributes.toString());
        String linkedTemplateName = linkedTemplateAttributes != null
            && linkedTemplateAttributes.containsKey("LinkedTemplateName")
                ? (String) linkedTemplateAttributes.get("LinkedTemplateName")
                : null;
        log.error("EPIC LTC BPR - getLinkedTemplateName - LinkedTemplateName: " + linkedTemplateName);
        return linkedTemplateName;
      }
    
      /**
       * Gets Login Type from Source defaultLinkedTemplateIDName
       * ("Epic DefaultLinkedTemplateID [source]")
       * 
       * @param name defaultLinkedTemplateIDName
       * @return loginType
       * @throws GeneralException
       */
      private String getLoginType(String name) throws GeneralException {
        log.error("EPIC LTC BPR - getloginType - lookup source: " + defaultLinkedTemplateIDName);
        log.error("EPIC LTC BPR - getloginType - lookup name: " + name);
        // Get record from account Source by its Display Name
        Account loginTypeAccount = idn.getAccountByDisplayName(defaultLinkedTemplateIDName, name);
        log.error("EPIC LTC BPR - getloginType - LoginTypeAccount: " + loginTypeAccount.toString());
        Map loginTypeAttributes = loginTypeAccount != null ? loginTypeAccount.getAttributes() : null;
        log.error("EPIC LTC BPR - getloginType - loginTypeAttributes: " + loginTypeAttributes.toString());
        String loginType = loginTypeAttributes != null ? (String) loginTypeAttributes.get("LoginType") : "";
        log.error("EPIC LTC BPR - getloginType - loginType: " + loginType);
        if (loginType == null || loginType == "") {
          return defaultLoginType;
        }
        return loginType;
      }
    
      private void removeLinkedTemplateConfig(String ltcToRemove, AccountRequest accountRequest) {
        accountRequest.add(new AttributeRequest("LinkedTemplateConfig", ProvisioningPlan.Operation.Remove, ltcToRemove));
        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yy");
        String nowDate = formatter.format(new Date());
        String[] split = ltcToRemove.split("#");
        split[2] = nowDate;
        String newLTC = String.join("#", split);
        log.error("EPIC LTC BPR - removeLinkedTemplateConfig - Adding LinkedTemplateConfig: " + newLTC);
        accountRequest
            .add(new AttributeRequest("LinkedTemplateConfig", ProvisioningPlan.Operation.Add, newLTC));
      }
    
      private String linkedTemplateConfigString(String linkedTemplateId) throws GeneralException {
        String linkedTemplateName = linkedTemplateId != null ? getLinkedTemplateName(linkedTemplateId) : null;
        log.error("EPIC LTC BPR - linkedTemplateConfigString - linkedTemplateName: " + linkedTemplateName);
        String loginType = getLoginType(linkedTemplateName);
        log.error("EPIC LTC BPR - linkedTemplateConfigString - loginType: " + loginType);
        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yy");
        String nowDate = formatter.format(new Date());
        String templateConfigValue = (String) linkedTemplateId + "#" + nowDate + "##" + loginType;
        log.error("EPIC LTC BPR - linkedTemplateConfigString - TemplateConfigValue: " + templateConfigValue);
        return templateConfigValue;
      }
    
      private void processPlan() throws Exception {
        log.error("EPIC LinkedTemplateConfig Before Provisioning -- Entering");
        for (AccountRequest accountRequest : plan.getAccountRequests()) {
          log.error("EPIC LTC BPR - processPlan - Executing Account Request for '" + accountRequest.toString());
          AttributeRequest linkedTemplate = accountRequest.getAttributeRequest("LinkedTemplateID");
          log.error("EPIC LTC BPR - processPlan - linkedTemplate: " + linkedTemplate);
          Operation linkedTemplateOp = linkedTemplate != null ? linkedTemplate.getOp() : null;
          log.error("EPIC LTC BPR - processPlan - linkedTemplateOp: " + linkedTemplateOp.toString());
          if (linkedTemplateOp.equals(ProvisioningPlan.Operation.Add)) {
            log.error("EPIC LTC BPR - processPlan(ADD) - Adding entitlement to Provisioning Plan");
            if (linkedTemplate.getValue() instanceof List) {
              List linkedTemplateIds = (List) linkedTemplate.getValue();
              log.error("EPIC LTC BPR - processPlan(ADD) - linkedTemplateId is a List");
              for (Object linkedTemplateId : linkedTemplateIds) {
                String templateConfigValue = linkedTemplateConfigString(linkedTemplateId.toString());
                accountRequest
                    .add(new AttributeRequest("LinkedTemplateConfig", ProvisioningPlan.Operation.Add, templateConfigValue));
              }
            } else if (linkedTemplate.getValue() instanceof String) {
              String linkedTemplateId = (String) linkedTemplate.getValue();
              log.error("EPIC LTC BPR - processPlan(ADD) - linkedTemplateId: " + linkedTemplateId);
              String templateConfigValue = linkedTemplateConfigString(linkedTemplateId.toString());
              accountRequest
                  .add(new AttributeRequest("LinkedTemplateConfig", ProvisioningPlan.Operation.Add, templateConfigValue));
            } else {
              throw new Exception("EPIC LTC BPR - linkedTemplate Value is neither a List or String");
            }
          } else if (linkedTemplateOp.equals(ProvisioningPlan.Operation.Remove)) {
            log.error("EPIC LTC BPR - processPlan(REMOVE) - Removing/Updating Entitlement from Provisioning Plan");
            log.error("EPIC LTC BPR - processPlan(REMOVE) - applicationName: " + application.getName());
            log.error("EPIC LTC BPR - processPlan(REMOVE) - nativeidentity: " + accountRequest.getNativeIdentity());
            Account account = idn.getAccountByNativeIdentity(application.getName(), accountRequest.getNativeIdentity());
            if (account != null) {
              log.error("EPIC LTC BPR - processPlan(REMOVE) - account: " + account.getAttributes().toString());
            } else {
              throw new Exception("EPIC LTC BPR - processPlan(REMOVE) - account: IS NULL");
            }
            List currentLTCs = (List) idn.getRawAccountAttribute(account, "LinkedTemplateConfig");
            if (currentLTCs != null && currentLTCs.size() > 0) {
              log.error("EPIC LTC BPR - processPlan(REMOVE) - currentLTCs: " + currentLTCs.toString());
            } else {
              throw new Exception("EPIC LTC BPR - processPlan(REMOVE) - currentLTCs: IS NULL");
            }
            // find in list STARTING WITH LinkedTemplateID.
            String ltcToRemove = "";
            log.error("EPIC LTC BPR - processPlan(REMOVE) - Getting all Linked Template Configs");
            if (linkedTemplate.getValue() instanceof List) {
              List linkedTemplateIds = (List) linkedTemplate.getValue();
              for (Object linkedTemplateId : linkedTemplateIds) {
                for (Object currentLTC : currentLTCs) {
                  if (currentLTC.toString().startsWith(linkedTemplateId.toString())) {
                    ltcToRemove = currentLTC.toString();
                  }
                }
              }
              if (ltcToRemove != "") {
                log.error("EPIC LTC BPR - processPlan(REMOVE) - Removing LinkedTemplateConfig: " + ltcToRemove);
                removeLinkedTemplateConfig(ltcToRemove, accountRequest);
              } else {
                throw new Exception("EPIC LTC BPR - processPlan(REMOVE) - NO ltcToRemove found");
              }
            } else if (linkedTemplate.getValue() instanceof String) {
              for (Object currentLTC : currentLTCs) {
                Object linkedTemplateId = linkedTemplate.getValue();
                if (currentLTC.toString().startsWith(linkedTemplateId.toString())) {
                  ltcToRemove = currentLTC.toString();
                }
              }
              if (ltcToRemove != "") {
                log.error("EPIC LTC BPR - processPlan(REMOVE) - Removing LinkedTemplateConfig: " + ltcToRemove);
                removeLinkedTemplateConfig(ltcToRemove, accountRequest);
              }
            } else {
              throw new Exception("linkedTemplate is neither a string or a list");
            }
    
          } else {
            log.error("Provisioning Plan Operation not handled: " + linkedTemplateOp.toString());
          }
    
        }
        log.error("EPIC LinkedTemplateConfig Before Provisioning -- Exiting");
      }
try {
  if (plan != null) {
    processPlan();
  } else { 
    throw new Exception("EPIC LTC Before Provisioning - No Plan to process");
  }
  }catch(Exception e)
{
  log.error("Threw Exception: " + e.getMessage());
  log.error("EPIC BPR stacktrace" + e.printStackTrace());
}
  ]]></Source>
</Rule>